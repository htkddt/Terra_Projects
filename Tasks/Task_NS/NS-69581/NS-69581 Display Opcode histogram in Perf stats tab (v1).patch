 src/sw/noc_dev/prototype/Gui/mainwindow.h      |   1 +
 src/sw/noc_dev/prototype/Gui/myconsole.cpp     |   3 +-
 src/sw/noc_dev/prototype/Gui/propertypanel.cpp | 276 ++++++++++++++++++++++---
 src/sw/noc_dev/prototype/Gui/propertypanel.h   |  27 ++-
 src/sw/noc_dev/prototype/Utils/stattab.h       |   1 +
 5 files changed, 269 insertions(+), 39 deletions(-)

diff --git a/src/sw/noc_dev/prototype/Gui/mainwindow.h b/src/sw/noc_dev/prototype/Gui/mainwindow.h
index 62bcb280db5..10d3c8c8319 100644
--- a/src/sw/noc_dev/prototype/Gui/mainwindow.h
+++ b/src/sw/noc_dev/prototype/Gui/mainwindow.h
@@ -653,6 +653,7 @@ private:
     void toggleShortCuts(bool state);
 
 public:
+    QString projectName;
     QList<QAction*> simulationToolbarActions;
     QMap <int, StatsView*> statsViewMap;
     StatsView* statsView = nullptr;
diff --git a/src/sw/noc_dev/prototype/Gui/myconsole.cpp b/src/sw/noc_dev/prototype/Gui/myconsole.cpp
index cfe714dc6be..33765072ca2 100644
--- a/src/sw/noc_dev/prototype/Gui/myconsole.cpp
+++ b/src/sw/noc_dev/prototype/Gui/myconsole.cpp
@@ -3477,7 +3477,7 @@ void INIConsole::preCommandDeclaration()
         return true;
     });
 
-    c->add_pre_cmd(NetSpeed::Command_idx(CMD_NEW_MESH), [&](const NetSpeed::NocConsole&, const std::vector<std::string>&) {
+    c->add_pre_cmd(NetSpeed::Command_idx(CMD_NEW_MESH), [&](const NetSpeed::NocConsole&, const std::vector<std::string> & args) {
         emit mainWindow->showWaypointInGridView("", "", false);
         mainWindow->layerShowHideClicked = false;
         mainWindow->destroyAllStatTabPlots();
@@ -3498,6 +3498,7 @@ void INIConsole::preCommandDeclaration()
                 dialog->close();
             }
         }
+        mainWindow->projectName = QString::fromStdString(args[3]);
         return true;
     });
 
diff --git a/src/sw/noc_dev/prototype/Gui/propertypanel.cpp b/src/sw/noc_dev/prototype/Gui/propertypanel.cpp
index de903c6da3d..97e3074fc05 100644
--- a/src/sw/noc_dev/prototype/Gui/propertypanel.cpp
+++ b/src/sw/noc_dev/prototype/Gui/propertypanel.cpp
@@ -3653,6 +3653,7 @@ void PropertyPanel::updatePlotsStatTab(QWidget * splitter, QSharedPointer<StatTa
 {
     if (!statTab || !namePlotMap || !splitter) return;
     getStatTabData(statTab);
+    std::vector<group_label> parents = statTab->parents;
     // Display normal plots
     for (auto const& it : statTab->sortedGroups) {
         auto it1 = statTab->groups.find(it.name);
@@ -3669,6 +3670,7 @@ void PropertyPanel::updatePlotsStatTab(QWidget * splitter, QSharedPointer<StatTa
         setPlotVisible(customPlot, g.enabled);
         if (!g.enabled) continue;
         bool init = false;
+        bool isMaster = false;
         // Init plot
         if (!customPlot) {
             customPlot = new QCustomPlot();
@@ -3681,8 +3683,16 @@ void PropertyPanel::updatePlotsStatTab(QWidget * splitter, QSharedPointer<StatTa
             namePlotMap->insert(name, customPlot);
             initNormalPlot(name, customPlot);
 
+            for (auto const& parent : parents) {
+                QString itemName = QString::fromStdString(parent);
+                if (name == itemName) {
+                    isMaster = true;
+                    break;
+                }
+            }
+
             // Create widget which include buttons and plot
-            auto* plotSplitter = createButtonPlotWidget(customPlot, gl, name, statTab);
+            auto* plotSplitter = createButtonPlotWidget(customPlot, gl, name, statTab, isMaster);
             splitter->layout()->addWidget(plotSplitter);
 
             init = true;
@@ -3865,7 +3875,7 @@ void PropertyPanel::initComparisonPlot(QString name, QCustomPlot * customPlot, P
     customPlot->setInteractions(QCP::iRangeDrag | QCP::iNotDragVertically);
 }
 
-GraphSplitter* PropertyPanel::createButtonPlotWidget(QCustomPlot * customPlot, const group_label gl, QString fullName, QSharedPointer<StatTab> stt)
+GraphSplitter* PropertyPanel::createButtonPlotWidget(QCustomPlot * customPlot, const group_label gl, QString fullName, QSharedPointer<StatTab> stt, bool isMaster)
 {
     EventGroup eg;
     std::map<group_label, EventGroup>& statTab = stt ? stt->groups : statDashboard->getCurrentStatTab()->groups;
@@ -3874,6 +3884,20 @@ GraphSplitter* PropertyPanel::createButtonPlotWidget(QCustomPlot * customPlot, c
         if (it.first == gl) { eg = it.second; break; }
     if (eg.name.empty()) return nullptr;
 
+    if (isMaster) {
+        QString dir = QDir::currentPath() + "/" + mw->projectName;
+        if (!QDir(dir).exists()) {
+            isMaster = false;
+        } else {
+            dir += "/trace";
+            if (!QDir(dir).exists()) {
+                isMaster = false;
+            } else {
+                listTraceFiles = QDir(dir).entryList(QStringList() << "*.in", QDir::Files);
+            }
+        }
+    }
+
     // Reorder buttons
     QWidget* reOrderWidget = new QWidget;
     QVBoxLayout* reOrderLayout = new QVBoxLayout;
@@ -3881,6 +3905,7 @@ GraphSplitter* PropertyPanel::createButtonPlotWidget(QCustomPlot * customPlot, c
     QPushButton* DwBtn = new QPushButton;
     QPushButton* ShowLatBtn = new QPushButton;
     QPushButton* ShowAllLatBtn = new QPushButton;
+    QPushButton* ShowOpcode = new QPushButton;
     QFrame* line = new QFrame;
     line->setFrameShape(QFrame::HLine);
     line->setFrameShadow(QFrame::Sunken);
@@ -3902,10 +3927,18 @@ GraphSplitter* PropertyPanel::createButtonPlotWidget(QCustomPlot * customPlot, c
     ShowAllLatBtn->setMaximumSize(maxBttSize);
     ShowAllLatBtn->setToolTip("Show/Hide all latency histograms");
 
+    if (isMaster) {
+        ShowOpcode->setStyleSheet("QPushButton{background: transparent;border: 0px;margin:0px}");
+        ShowOpcode->setIcon(QIcon("://images/icons/show_lat_histogram.png"));
+        ShowOpcode->setMaximumSize(maxBttSize);
+        ShowOpcode->setToolTip("Show/Hide opcode histogram");
+    }
+
     reOrderLayout->setAlignment(Qt::AlignTop);
     reOrderLayout->setContentsMargins(contentsMargin);
     reOrderLayout->addWidget(ShowAllLatBtn);
     reOrderLayout->addWidget(ShowLatBtn);
+    if (isMaster) reOrderLayout->addWidget(ShowOpcode);
     reOrderLayout->addWidget(line);
     reOrderLayout->addWidget(UpBtn);
     reOrderLayout->addWidget(DwBtn);
@@ -3980,6 +4013,10 @@ GraphSplitter* PropertyPanel::createButtonPlotWidget(QCustomPlot * customPlot, c
     ShowLatBtn->setDefault(false);
     ShowAllLatBtn->setAutoDefault(false);
     ShowAllLatBtn->setDefault(false);
+    if (isMaster) {
+        ShowOpcode->setAutoDefault(false);
+        ShowOpcode->setDefault(false);
+    }
 
     QString tooltip = "Start time is the time at which the performance stats currently displayed in the plot begins. If start time is 109 and zoom level is for 1000ns, then performance stats between 109ns and 1109ns would be displayed.";
     INILineEdit* startTime = new INILineEdit(QString::number((long)eg.zoomLower), QString::fromStdString(gl), fullName, INILineEdit::StartTime);
@@ -4047,6 +4084,7 @@ GraphSplitter* PropertyPanel::createButtonPlotWidget(QCustomPlot * customPlot, c
     connect(DwBtn, SIGNAL(clicked()), this, SLOT(movePlotDown()));
     connect(ShowLatBtn, SIGNAL(clicked()), this, SLOT(showLatencyButtonSlot()));
     connect(ShowAllLatBtn, SIGNAL(clicked()), this, SLOT(showAllLatencyHistogram()));
+    if (isMaster) connect(ShowOpcode, SIGNAL(clicked()), this, SLOT(showOpcodeButtonSlot()));
     connect(customPlot->axisRect(0)->axis(QCPAxis::atBottom, 0), SIGNAL(rangeChanged(QCPRange)), this, SLOT(graphRangeChange()));
     connect(customPlot, SIGNAL(mouseWheel(QWheelEvent*)), this, SLOT(wheelOnCustomPlot(QWheelEvent*)));
 
@@ -4195,6 +4233,19 @@ void PropertyPanel::graphRangeChange()
     }
 }
 
+void PropertyPanel::updateHistogramStatus(QCustomPlot * customPlot, bool status)
+{
+    if (!customPlot) return;
+    QString gname = customPlot->getEventGroupName();
+    QSharedPointer<StatTab> statTab = mw->getTabStatTabMap().value(mw->getLiveWidget(), nullptr);
+    if (!statTab) return;
+    auto egi = statTab->groups.find(gname.toStdString());
+    if (egi == statTab->groups.end()) return;
+    EventGroup & eg = egi->second;
+    if (customPlot->windowTitle() == opcodeHistogramName) eg.showOpcodeHistogram = status;
+    else if (customPlot->windowTitle() == latencyHistogramName) eg.showLatencyHistogram = status;
+}
+
 void PropertyPanel::showLatencyFrequencyToolTip(QMouseEvent * event)
 {
     QCustomPlot* lat = dynamic_cast<QCustomPlot*>(QObject::sender());
@@ -4244,7 +4295,7 @@ void PropertyPanel::updateLatencyHistogram(const EventGroup & eg, QCustomPlot *
         // Find child with class name is QCustomPlot
         if (QCustomPlot * cusplot = qobject_cast<QCustomPlot*>(it)) {
             // If that child is a Latency historam
-            if (cusplot && cusplot->windowTitle() == histogramName) {
+            if (cusplot && cusplot->windowTitle() == latencyHistogramName) {
                 latencyhistogram = qobject_cast<QCustomPlot*>(it);
                 if (latencyhistogram) updateLatencyData(eg, latencyhistogram, st);
                 break;
@@ -4253,7 +4304,8 @@ void PropertyPanel::updateLatencyHistogram(const EventGroup & eg, QCustomPlot *
     }
 }
 
-void PropertyPanel::updateLatencyData(const EventGroup & eg, QCustomPlot * customPlot, QSharedPointer<StatTab> statTab) {
+void PropertyPanel::updateLatencyData(const EventGroup & eg, QCustomPlot * customPlot, QSharedPointer<StatTab> statTab)
+{
     //Get latency events
     const QMap<long, long> latency_events = eg.compute_latency_events(statTab, eg.zoomLower, eg.zoomUpper);
     if (latency_events.empty()) return;
@@ -4302,16 +4354,14 @@ void PropertyPanel::updateLatencyData(const EventGroup & eg, QCustomPlot * custo
     yAxis->setAutoTickCount(std::min(max_cnt, 5));
     yAxis->setAutoTicks(true);
     yAxis->grid()->setVisible(true);
-    //    yAxis->rescale();
 
     int plotCount = customPlot->plottableCount();
     for (int count = 0; count < plotCount; ++count) {
         auto plottable = dynamic_cast<QCPBars*>(customPlot->plottable(count));
         if (!plottable) continue;
-        if (plottable->name() != histogramName) continue;
+        if (plottable->name() != latencyHistogramName) continue;
         plottable->setWidth(delta);
         plottable->setData(bar_centers, bucketed_latencies);
-        //        plottable->rescaleKeyAxis();
         break;
     }
     customPlot->rescaleAxes();
@@ -4322,7 +4372,7 @@ QCustomPlot* PropertyPanel::createLatencyHistogram(const EventGroup & eg, QShare
 {
     //Create container
     QCustomPlot* customPlot = new QCustomPlot;
-    QCPPlotTitle* title = new QCPPlotTitle(customPlot, histogramName);
+    QCPPlotTitle* title     = new QCPPlotTitle(customPlot, latencyHistogramName);
     title->setTextColor(Qt::blue);
     customPlot->setToolTip("Latency histogram for " + QString::fromStdString(eg.name));
     customPlot->plotLayout()->insertRow(0);
@@ -4331,13 +4381,13 @@ QCustomPlot* PropertyPanel::createLatencyHistogram(const EventGroup & eg, QShare
     customPlot->xAxis->setLabelColor(Qt::blue);
     customPlot->yAxis->setLabel("Frequency");
     customPlot->yAxis->setLabelColor(Qt::blue);
-    customPlot->setWindowTitle(histogramName);
+    customPlot->setWindowTitle(latencyHistogramName);
     customPlot->setInteractions(QCP::iRangeDrag | QCP::iNotDragVertically);
     connect(customPlot, SIGNAL(mouseMove(QMouseEvent*)), this, SLOT(showLatencyFrequencyToolTip(QMouseEvent*)));
 
     //Create plottable
     QCPBars * bar = new QCPBars(customPlot->xAxis, customPlot->yAxis);
-    bar->setName(histogramName);
+    bar->setName(latencyHistogramName);
     bar->setVisible(true);
     bar->setPen(QPen(Qt::red));
     bar->setBrush(QBrush(Qt::blue));
@@ -4349,18 +4399,6 @@ QCustomPlot* PropertyPanel::createLatencyHistogram(const EventGroup & eg, QShare
     return customPlot;
 }
 
-void PropertyPanel::updateLatencyHistogramStatus(QCustomPlot * customPlot, bool status)
-{
-    if (!customPlot) return;
-    QString gname = customPlot->getEventGroupName();
-    QSharedPointer<StatTab> statTab = mw->getTabStatTabMap().value(mw->getLiveWidget(), nullptr);
-    if (!statTab) return;
-    auto egi = statTab->groups.find(gname.toStdString());
-    if (egi == statTab->groups.end()) return;
-    EventGroup & eg = egi->second;
-    eg.showLatencyHistogram = status;
-}
-
 void PropertyPanel::showHideLatencyHistogram(QWidget * splitter)
 {
     auto horizontalSplitter = qobject_cast<QSplitter*>(splitter);
@@ -4369,14 +4407,13 @@ void PropertyPanel::showHideLatencyHistogram(QWidget * splitter)
     for (int i = 0; i < horizontalSplitter->count(); ++i) {
         auto child = horizontalSplitter->widget(i);
         if (QCustomPlot * customPlot = qobject_cast<QCustomPlot*>(child)) {
-            if (customPlot->windowTitle() == histogramName) {
+            if (customPlot->windowTitle() == latencyHistogramName) {
                 bool show = false;
                 if (customPlot->isVisible()) customPlot->hide();
                 else { customPlot->show(); show = true; }
-                updateLatencyHistogramStatus(customPlot, show);
+                updateHistogramStatus(customPlot, show);
                 return;
-            }
-            else graph = customPlot;
+            } else if (customPlot->windowTitle().isEmpty()) graph = customPlot;
         }
     }
 
@@ -4392,11 +4429,14 @@ void PropertyPanel::showHideLatencyHistogram(QWidget * splitter)
     EventGroup & g = it->second;
     g.showLatencyHistogram = true;
     auto histogram = createLatencyHistogram(g, statTab);
-    if (auto container = qobject_cast<QSplitter*>(splitter))
-        container->insertWidget(1, histogram);
+    histogram->setMinimumWidth(270);
+    if (auto container = qobject_cast<QSplitter*>(splitter)) {
+        container->insertWidget(1, histogram); 
+    }
 }
 
-void PropertyPanel::showLatencyButtonSlot() {
+void PropertyPanel::showLatencyButtonSlot()
+{
     // Get the show/hide button
     if (QPushButton * btn = qobject_cast<QPushButton*>(QObject::sender())) {
         auto buttonLayout = btn->parentWidget();
@@ -4407,6 +4447,175 @@ void PropertyPanel::showLatencyButtonSlot() {
     }
 }
 
+void PropertyPanel::updateOpcodeHistogram(const EventGroup & eg, QCustomPlot * customplot, QSharedPointer<StatTab> st)
+{
+    if (!customplot || !customplot->parentWidget()) return;
+    auto horizontalSplitter = qobject_cast<QSplitter*>(customplot->parentWidget());
+    const int containsHistogram = 3;
+    if (!horizontalSplitter || horizontalSplitter->count() < containsHistogram) return;
+
+    QCustomPlot * opcodehistogram = nullptr;
+    for (auto& it : horizontalSplitter->children()) {
+        // Find child with class name is QCustomPlot
+        if (QCustomPlot * cusplot = qobject_cast<QCustomPlot*>(it)) {
+            // If that child is a Latency historam
+            if (cusplot && cusplot->windowTitle() == opcodeHistogramName) {
+                opcodehistogram = qobject_cast<QCustomPlot*>(it);
+                if (opcodehistogram) updateOpcodeData(eg, opcodehistogram, st);
+                break;
+            }
+        }
+    }
+}
+
+void PropertyPanel::updateOpcodeData(const EventGroup & eg, QCustomPlot * customPlot, QSharedPointer<StatTab> statTab)
+{
+    auto masterName = QString::fromStdString(eg.name);
+    int posLastDot = masterName.lastIndexOf('.');
+    masterName = masterName.left(posLastDot);
+    masterName.replace("/", "_");
+    masterName.replace(".", "_");
+
+    QMap<QString, double> opcode_datas;
+    for (auto& nameFile : listTraceFiles) {
+        if (!nameFile.contains(masterName)) continue;
+        QString traceFile = QDir::currentPath() + "/" + mw->projectName + "/trace/" + nameFile;
+        QFile file(traceFile);
+        if (file.open(QIODevice::ReadOnly | QIODevice::Text)) {
+            QTextStream input(&file);
+            while (!input.atEnd()) {
+                auto line = input.readLine();
+                if (!line.contains("opcode")) continue;
+                auto opcode = line.split("opcode:").last().split(" ").first();
+                opcode_datas[opcode]++;
+            }
+            file.close();
+            break;
+        } else return;
+    }
+
+    if (opcode_datas.isEmpty()) return;
+
+    QVector<double> ticks;
+    QVector<double> opcodeCounts;
+    QStringList opcodeTypes;
+    for (int i = 0; i < opcode_datas.size(); i++) {
+        ticks << i + 1;
+        auto opcodeType = opcode_datas.keys().at(i);
+        opcodeTypes.append(opcodeType);
+        opcodeCounts.append(opcode_datas[opcodeType]);
+    }
+
+    // Find the range of the count of each opcode type
+    const int min_count_opcode = *std::min_element(opcodeCounts.begin(), opcodeCounts.end());
+    const int max_count_opcode = *std::max_element(opcodeCounts.begin(), opcodeCounts.end());
+
+    auto xAxis = customPlot->xAxis;
+    xAxis->setRange(min_count_opcode, max_count_opcode);
+    xAxis->setTickVector(ticks);
+    xAxis->setTickVectorLabels(opcodeTypes);
+    xAxis->grid()->setVisible(true);
+    xAxis->rescale();
+
+    auto yAxis = customPlot->yAxis;
+    yAxis->setRange(0, *std::max_element(opcodeCounts.begin(), opcodeCounts.end()) * 1.2);
+    yAxis->setAutoTicks(true);
+    yAxis->grid()->setVisible(true);
+
+    int plotCount = customPlot->plottableCount();
+    for (int count = 0; count < plotCount; ++count) {
+        auto plottable = dynamic_cast<QCPBars*>(customPlot->plottable(count));
+        if (!plottable) continue;
+        if (plottable->name() != opcodeHistogramName) continue;
+        plottable->setWidth(1);
+        plottable->setData(ticks, opcodeCounts);
+        break;
+    }
+    customPlot->rescaleAxes();
+    customPlot->replot();
+}
+
+QCustomPlot* PropertyPanel::createOpcodeHistogram(const EventGroup & eg, QSharedPointer<StatTab> st)
+{
+    //Create container
+    QCustomPlot* customPlot = new QCustomPlot;
+    QCPPlotTitle* title = new QCPPlotTitle(customPlot, opcodeHistogramName);
+    title->setTextColor(Qt::blue);
+    customPlot->setToolTip("Opcode histogram for " + QString::fromStdString(eg.name));
+    customPlot->plotLayout()->insertRow(0);
+    customPlot->plotLayout()->addElement(0, 0, title);
+    customPlot->xAxis->setLabel("Opcode");
+    customPlot->xAxis->setLabelColor(Qt::blue);
+    customPlot->xAxis->setTickLabelRotation(-90);
+    customPlot->xAxis->setAutoTicks(false);
+    customPlot->xAxis->setAutoTickLabels(false);
+    customPlot->yAxis->setLabel("Count");
+    customPlot->yAxis->setLabelColor(Qt::blue);
+    customPlot->setWindowTitle(opcodeHistogramName);
+    customPlot->setInteractions(QCP::iRangeDrag | QCP::iNotDragVertically);
+
+    //Create plottable
+    QCPBars * bar = new QCPBars(customPlot->xAxis, customPlot->yAxis);
+    bar->setName(opcodeHistogramName);
+    bar->setVisible(true);
+    bar->setPen(QPen(Qt::red));
+    bar->setBrush(QBrush(Qt::blue));
+    customPlot->addPlottable(bar);
+
+    //Update data
+    updateOpcodeData(eg, customPlot, st);
+
+    return customPlot;
+}
+
+void PropertyPanel::showHideOpcodeHistogram(QWidget * splitter)
+{
+    auto horizontalSplitter = qobject_cast<QSplitter*>(splitter);
+    if (!horizontalSplitter) return;
+    QCustomPlot* graph = nullptr;
+    for (int i = 0; i < horizontalSplitter->count(); ++i) {
+        auto child = horizontalSplitter->widget(i);
+        if (QCustomPlot * customPlot = qobject_cast<QCustomPlot*>(child)) {
+            if (customPlot->windowTitle() == opcodeHistogramName) {
+                bool show = false;
+                if (customPlot->isVisible()) customPlot->hide();
+                else { customPlot->show(); show = true; }
+                updateHistogramStatus(customPlot, show);
+                return;
+            } else if (customPlot->windowTitle().isEmpty()) graph = customPlot;
+        }
+    }
+
+    auto scollArea = mw->getLiveWidget();
+    if (!scollArea) return;
+    QSharedPointer<StatTab> statTab = mw->getTabStatTabMap().value(scollArea, nullptr);
+    if (!statTab) return;
+    auto gname = graph->getEventGroupName();
+    if (gname.isEmpty()) return;
+
+    auto it = statTab->groups.find(gname.toStdString());
+    if (it == statTab->groups.end()) return;
+    EventGroup & g = it->second;
+    g.showOpcodeHistogram = true;
+    auto histogram = createOpcodeHistogram(g, statTab);
+    histogram->setMinimumWidth(270);
+    if (auto container = qobject_cast<QSplitter*>(splitter)) {
+        container->insertWidget(1, histogram);
+    }
+}
+
+void PropertyPanel::showOpcodeButtonSlot()
+{
+    // Get the show/hide button
+    if (QPushButton* btn = qobject_cast<QPushButton*>(QObject::sender())) {
+        auto buttonLayout = btn->parentWidget();
+        if (!buttonLayout) return;
+        auto horSplitter = buttonLayout->parentWidget();
+        if (!horSplitter) return;
+        showHideOpcodeHistogram(horSplitter);
+    }
+}
+
 QWidget* PropertyPanel::getParentWidgetInVisualizationTab(QWidget * widget) {
     if (!widget) return nullptr;
     QMap<QString, QCustomPlot*>* plotMap = mw->getTabPlotsMap().value(widget, nullptr);
@@ -4477,7 +4686,7 @@ void PropertyPanel::showAllLatencyHistogram()
                     for (int i = 0; i < horizontalSplitter->count(); ++i) {
                         auto it = horizontalSplitter->widget(i);
                         if (QCustomPlot * plot = dynamic_cast<QCustomPlot*>(it)) {
-                            if (plot->windowTitle() == histogramName) {
+                            if (plot->windowTitle() == latencyHistogramName) {
                                 plot->hide();
                                 updateLatencyHistogramStatus(customPlot, false);
                                 break;
@@ -4497,7 +4706,7 @@ void PropertyPanel::showAllLatencyHistogram()
                     for (int i = 0; i < count; ++i) {
                         auto it = horizontalSplitter->widget(i);
                         if (QCustomPlot * plot = qobject_cast<QCustomPlot*>(it)) {
-                            if (plot->windowTitle() == histogramName) {
+                            if (plot->windowTitle() == latencyHistogramName) {
                                 plot->show();
                                 updateLatencyHistogramStatus(customPlot, true);
                                 break;
@@ -4510,6 +4719,7 @@ void PropertyPanel::showAllLatencyHistogram()
                                     if (g.name == gname.toStdString()) {
                                         g.showLatencyHistogram = true;
                                         auto histogram = createLatencyHistogram(g, statTab);
+                                        histogram->setMinimumWidth(270);
                                         horizontalSplitter->insertWidget(1, histogram);
                                         updateLatencyHistogramStatus(customPlot, true);
                                         break;
@@ -4619,7 +4829,7 @@ void PropertyPanel::movePlotUp()
         //        showHideLatencyHistogram(horizontalSplitter);
         for (auto const& it : horizontalSplitter->children()) {
             if (auto customPlot = qobject_cast<QCustomPlot*>(it)) {
-                if (customPlot->windowTitle() == histogramName) continue;
+                if (customPlot->windowTitle() == latencyHistogramName) continue;
                 auto graphSplitter = horizontalSplitter->parentWidget();
                 if (customPlot && graphSplitter) swapGraph(customPlot, graphSplitter);
                 break;
@@ -4723,7 +4933,7 @@ void PropertyPanel::movePlotDown()
         //        showHideLatencyHistogram(horizontalSplitter);
         for (auto const& it : horizontalSplitter->children()) {
             if (auto customPlot = qobject_cast<QCustomPlot*>(it)) {
-                if (customPlot->windowTitle() == histogramName) continue;
+                if (customPlot->windowTitle() == latencyHistogramName) continue;
                 auto graphSplitter = horizontalSplitter->parentWidget();
                 if (customPlot && graphSplitter)  swapGraph(customPlot, graphSplitter);
                 break;
diff --git a/src/sw/noc_dev/prototype/Gui/propertypanel.h b/src/sw/noc_dev/prototype/Gui/propertypanel.h
index d8d9f99f9f5..7989ce156ca 100644
--- a/src/sw/noc_dev/prototype/Gui/propertypanel.h
+++ b/src/sw/noc_dev/prototype/Gui/propertypanel.h
@@ -264,6 +264,7 @@ public:
 
     inline QWidget* getSimDashBoard() { return simDashboard; }
     QWidget* getCurrentStatWidget() { return currentStatWidget; }
+    void updateHistogramStatus(QCustomPlot* plot, bool status);
     /**
      * @brief create a graph present latency histogram
      * @param latency data points
@@ -272,7 +273,15 @@ public:
     QCustomPlot* createLatencyHistogram(const EventGroup& eg, QSharedPointer<StatTab> st);
     void updateLatencyHistogram(const EventGroup& eg, QCustomPlot* customplot, QSharedPointer<StatTab> st);
     void showHideLatencyHistogram(QWidget* gnowidget);
-    void updateLatencyHistogramStatus(QCustomPlot* plot, bool status);
+    /**
+    /**
+     * @brief create a graph present opcode histogram
+     * @param opcode data count
+     * @return a graph
+     */
+    QCustomPlot* createOpcodeHistogram(const EventGroup& eg, QSharedPointer<StatTab> st);
+    void updateOpcodeHistogram(const EventGroup& eg, QCustomPlot* customplot, QSharedPointer<StatTab> st);
+    void showHideOpcodeHistogram(QWidget* gnowidget);
     /**
      * @brief getButtonWidget
      * @return
@@ -526,7 +535,7 @@ public:
     QCPAxisRect* initPlotScale(QCustomPlot*);
 
     //Create container for normal and merge plot
-    GraphSplitter* createButtonPlotWidget(QCustomPlot*, const group_label gl, QString fullName = "", QSharedPointer<StatTab> = nullptr);
+    GraphSplitter* createButtonPlotWidget(QCustomPlot*, const group_label gl, QString fullName = "", QSharedPointer<StatTab> = nullptr, bool isMaster = false);
 
     //Create container for comparison plot
     GraphSplitter * createComparisonPlotWidget(QCustomPlot*, const comparison_label, QString fullName = "", QSharedPointer<StatTab> = nullptr);
@@ -767,7 +776,11 @@ private:
     void updateBridgePropertyAfterCommand(NetSpeed::Bridge * b);
     void updateIntefacePropertyAfterCommand(NetSpeed::Interface * ifce, bool showTooltip = true);
 
+    void updateLatencyData(const EventGroup&, QCustomPlot*, QSharedPointer<StatTab>);
+    void updateOpcodeData(const EventGroup&, QCustomPlot*, QSharedPointer<StatTab>);
+
     QCustomPlot * findPlot(QSharedPointer<StatTab> statTab, QString name);
+    QCustomPlot* generateNormalPlot(QString lb);
 
     int currentIndexDock(QtProperty * property = nullptr);
     
@@ -796,6 +809,7 @@ private:
     QStandardItem * selectAllCheckbox = nullptr;
     QCheckBox * simTabCkBox = nullptr;
     QList<QString> listItemLegendClicked;
+    QStringList listTraceFiles;
 
     std::vector<std::shared_ptr<NetSpeed::profile_t>> sim_profilesList;
     std::vector<NetSpeed::transaction_t> filteredTransactionList;
@@ -832,10 +846,9 @@ private:
      * @brief vcName for tooltip in bottom right window
      */
     QString vcName;
-    QCustomPlot * generateNormalPlot(QString lb);
-    void updateLatencyData(const EventGroup&, QCustomPlot*, QSharedPointer<StatTab>);
 
-    const QString histogramName = "Latency Histogram";
+    const QString latencyHistogramName = "Latency Histogram";
+    const QString opcodeHistogramName = "Opcode Histogram";
 
 private:
     friend class Test_PropertyPanel;
@@ -1182,6 +1195,10 @@ private slots:
     void handleMousePress(QMouseEvent * event);
     void handleMouseRelease(QMouseEvent * event);
     void handleLegendClicked(QCPLegend* legend, QCPAbstractLegendItem* item, QMouseEvent* event);
+    /**
+     * @brief showHideOpcodeHistogram
+     */
+    void showOpcodeButtonSlot();
     /**
      * @brief showHideLatencyHistogram
      */
diff --git a/src/sw/noc_dev/prototype/Utils/stattab.h b/src/sw/noc_dev/prototype/Utils/stattab.h
index fc441e65cae..f604bd84fbf 100644
--- a/src/sw/noc_dev/prototype/Utils/stattab.h
+++ b/src/sw/noc_dev/prototype/Utils/stattab.h
@@ -52,6 +52,7 @@ struct EventGroup {
     double zoomLower = 0;
     double zoomUpper = 10000;
     bool showLatencyHistogram = false;
+    bool showOpcodeHistogram = false;
 
     bool updateMerge = false;
 
